<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://redbean88.github.io/</id><title>dev note</title><subtitle>학습한 내용을 기록합니다.</subtitle> <updated>2023-10-06T11:12:13+09:00</updated> <author> <name>redbean88</name> <uri>https://redbean88.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://redbean88.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://redbean88.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 redbean88 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>자바 ORM 표준 JPA 프로그래밍(희망편08)</title><link href="https://redbean88.github.io/posts/JPA-CH08/" rel="alternate" type="text/html" title="자바 ORM 표준 JPA 프로그래밍(희망편08)" /><published>2022-05-16T22:20:01+09:00</published> <updated>2022-05-17T00:01:21+09:00</updated> <id>https://redbean88.github.io/posts/JPA-CH08/</id> <content src="https://redbean88.github.io/posts/JPA-CH08/" /> <author> <name>redbean88</name> </author> <category term="JPA" /> <summary> Chapter 08. 값 타입 JPA의 데이터 타입을 가장 크게 분류하면 엔티티 타입과 값 타입으로 나눌 수 있다. 엔티티 타입은 @Entity로 정의하는 객체이고, 값 타입은 int, Integer, String처럼 단순히 값으로 사용하는 자바 기본 타입이나 객체를 말한다. 엔티티 타입은 식별자를 통해 지속해서 추적할 수 있지만, 값 타입은 추적할 수 없다. 값 타입은 3가지로 분류할 수 있다. 기본 값 타입basic value type 자바 기본 타입 래퍼 클래스 임베디드 타입embeded type(복합 값 타입) 컬렉션 값 타입collection value type 임베디드 타입은 JPA에서 사용자가 직접 정의한 값 타입이다. ... </summary> </entry> <entry><title>자바 ORM 표준 JPA 프로그래밍(희망편09)</title><link href="https://redbean88.github.io/posts/JPA-CH09/" rel="alternate" type="text/html" title="자바 ORM 표준 JPA 프로그래밍(희망편09)" /><published>2022-05-16T21:20:01+09:00</published> <updated>2022-05-17T00:01:21+09:00</updated> <id>https://redbean88.github.io/posts/JPA-CH09/</id> <content src="https://redbean88.github.io/posts/JPA-CH09/" /> <author> <name>redbean88</name> </author> <category term="JPA" /> <summary> Chapter 10. 객체지향 쿼리 언어 이장의 내용 객체지향 쿼리 소개 JPQL Criteria QueryDSL 네이티브 SQL 객체지향 쿼리 심화 9.1 객체지향 쿼리 소개 테이블이 아닌 객체를 대상으로 검색하는 객체지향 쿼리다. SQL을 추상화해서 특정 데이터베이스 SQL에 의존하지 않는다. 9.2 JPQL JPQLJava Persistence Query Language은 엔티티 객체를 조회하는 객체지향 쿼리다. JPQL은 결국 SQL로 변환된다. Criteria나 QueryDSL도 결국 JPQL을 만들어주는 빌더 역할을 할 뿐이므로 JPQL을 잘 알아야 한다. 9.2.1 기본 문법과 쿼리 AP... </summary> </entry> <entry><title>자바 ORM 표준 JPA 프로그래밍(희망편07)</title><link href="https://redbean88.github.io/posts/JPA-CH07/" rel="alternate" type="text/html" title="자바 ORM 표준 JPA 프로그래밍(희망편07)" /><published>2022-05-16T21:20:01+09:00</published> <updated>2022-05-17T00:01:21+09:00</updated> <id>https://redbean88.github.io/posts/JPA-CH07/</id> <content src="https://redbean88.github.io/posts/JPA-CH07/" /> <author> <name>redbean88</name> </author> <category term="JPA" /> <summary> Chapter 07. 프록시와 연관관계 관리 프록시와 즉시 로딩, 지연 로딩 영속성 전이와 고아 객체 7.1 프록시 엔티티를 조회할 때 연관된 엔티티들이 항상 사용되는 것은 아니다. printUserAndTeam() 메서드는 memberId로 회원 엔티티를 찾아서 연관된 팀의 이름도 출력한다. 반면 printUser() 메서드는 회원 엔티티만 출력하고 연관된 팀 엔티티는 전혀 사용하지 않는다. printUser() 메서드는 회원 엔티티만 사용하므로 em.find()로 회원 엔티티를 조회할 때 회원과 연관된 팀 엔티티까지 데이터베이스에서 함께 조회해 두는 것은 효율적이지 않다. JPA는 위 문제를 해결하려고 엔티티가 실제 사용될 때까지 데이터베이스 조회를 ... </summary> </entry> <entry><title>자바 ORM 표준 JPA 프로그래밍(희망편06)</title><link href="https://redbean88.github.io/posts/JPA-CH06/" rel="alternate" type="text/html" title="자바 ORM 표준 JPA 프로그래밍(희망편06)" /><published>2022-04-25T21:20:01+09:00</published> <updated>2022-05-17T00:01:21+09:00</updated> <id>https://redbean88.github.io/posts/JPA-CH06/</id> <content src="https://redbean88.github.io/posts/JPA-CH06/" /> <author> <name>redbean88</name> </author> <category term="JPA" /> <summary> 고급 매핑 이 장에서 배울 고급 매핑은 다음과 같다. 상속 관계 매핑: 객체의 상속 관계를 어떻게 데이터베이스에 매핑하는지 배운다. @MappedSuperclass: 등록일, 수정일 같이 여러 엔티티에서 공통으로 사용하는 매핑 정보만 상속 받고 싶으면 이 기능을 사용하면 된다. 복합 키와 식별 관계 매핑: 데이터베이스의 식별자가 하나 이상일 때 매핑하는 방법을 다룬다. 그리고 데이터베이스 설계에서 이야기하는 식별 관계와 비식별 관계에 대해서도 다룬다. 조인 테이블: 테이블은 외래 키 하나로 연관관계를 맺을 수 있지만 연관관계를 관리하는 연결 테이블을 두는 방법도 있다. 여기서는 이 연결 테이블을 매핑하는 방법을 다룬다. 엔티티 하나에 여러 테이블 매핑하기: 보통 엔티티 하나에 테... </summary> </entry> <entry><title>자바 ORM 표준 JPA 프로그래밍(희망편05)</title><link href="https://redbean88.github.io/posts/JPA-CH05/" rel="alternate" type="text/html" title="자바 ORM 표준 JPA 프로그래밍(희망편05)" /><published>2022-04-11T21:20:01+09:00</published> <updated>2022-05-17T00:01:21+09:00</updated> <id>https://redbean88.github.io/posts/JPA-CH05/</id> <content src="https://redbean88.github.io/posts/JPA-CH05/" /> <author> <name>redbean88</name> </author> <category term="JPA" /> <summary> 다양한 연관관계 매핑 이번 장에서는 다양한 연관관계를 다룬다. 그 전에 앞 장의 내용을 정리해보자. 다중성 단방향, 양방향 연관관계의 주인 먼저 연관관계가 있는 두 엔티티가 일대일 관계인지 일대다 관계인지 다중성을 고려해야 한다. 다음으로 두 엔티티 중 한쪽만 참조하는 단방향 관계인지 서로 참조하는 양방향 관계인지 고려해야 한다. 마지막으로 양방향 관계면 연관관계의 주인을 정해야 한다. 다중성 연관관계에는 다음과 같은 다중성이 있다. 다대일@ManyToOne 일대다@OneToMany 일대일@OneToOne 다대다@ManyToMany 다중 성을 판단하기 어려울 떄는 반대방향을 생각해보면 된... </summary> </entry> </feed>
